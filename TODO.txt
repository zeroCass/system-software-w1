receber um arquivo de texto
separar o arquivo em .section_text e .data_section

# pré-processamento:
armazenar cada comando em um vetor? (ex: input N é um comando)
verificar se é um comando terminado por espaço, quebra de linha ou tabulação (com execeção da LABEL:)
desconsiderar todos os espaços, tabulações e enteders desncessarios nessa linha de comando (ex: copy	n1, n3; to: copy n1,n3)
remover comnetário começando por ; e terminando com espaço, tabulações ou enters


# primeira passagem:
VAR -> contador_posicao, contador_linha
- ler linha a procura de rotulos e simbolos
- assumir que os simbolos estão escritos corretamente para poder pular a quantidade de endereços
(ex: assumir que copy ocupa 3 espaços de endereços e os demais ocupam 2)
- se eh rotulo:
	procura na TS
	- se achou rotulo, erro rotulo ja definido
	- se não achou, insere o rotulo junto do valor de contador_posicao
- se eh operacao
	- contador_posicao += tamanho da instrucao
- se eh diretiva
	- executa diretiva
	- contador_posicao += tamanho da diretiva
- se nao eh diretiva nem operacao
	- erro, opercao nao identificado

contador_linha++




# segunda passagem:
variaveis: contador_posicao, contador_linha
em quanto nao chegou no fim do arquivo:
- ler linha instrucoes e simbolos e rotulos
- se rotulo
	verifica se tem erro lexico (rotulos nao podem começar com número e unico caracter especial q podem ter eh “_”. )
	se nao tem erro lexico, ignora rotulo e pula para proxima palavra
- se palavra eh uma instrucao (procura na tabela de instrucao)
	verifica se o tamanho da instrucao esta correto (considerar que a instrucao pode estar separada por enter)
	- se invalido: erro -> numero de operandos invaldida
	- se valido:
		- pega o operando e verifica se existe na tabela de simbolos:
			- nao achou: erro simbolo indefinido



remover os espaços de Y + 2 -> Y+2
verificar se o simbolo é valido, se é do formato: ^([a-zA-Z0-9_]+)\+([0-9]+)$
Regex para verificar se a linha é simbolo ou se é simbolo com aritimerica de pointeiros (Y+2)
criar funcao para fazer a aritmetica de ponteiro (nao verifica se da segmentation fault ou excede a qtd de esapcos alocados)
OBS: Nao é aceito operacao de arimetica quebrado por linha, ex: Y\n + 2 ou Y +\n2



# Consideracoes importantes sobre o codigo
- Para compilar: g++ montador.cpp -DTHROW_ERRORS=0 -std=c++17 -o montador (o arugmento -DTHROW_ERRORS=0 serve para desabilitar o modo padrão que
finaliza o programa ao identificar um erro. Foi recomendando pelo professor da discplina que o erro fosse printado no output ao inves de finalizar o programa).
É válido mencionar que, ao rodar o programar com -DTHROW_ERRORS=0, caso o programa não identique uma LABEL por exemplo, ao invés de finalizar o código,
ele irá continuar sua execução, resultando possíveis erros como acesso a um dado undefined. Além disso, caso um LABEL seja indefinido, possivelmente o valor da posição
de memória no arquivo .obj será -1.
- É extremamente importante considerar que, ao fornecer como input um arquivo .pre, o código NÃO irá realizar NOVAMENTE o pré-processamento, ou seja,
não irá excluir espaços, tabulações desnecessários e remover comentários. Sendo assim, o programa irá considerar que o arquivo .pre estará totalmente formatado 
da maneira correta (em UPPERCASE e sem comentários/espaços inutéis).
- Durante a construcao do codigo nao foi levado em consideracao a otimizacao como fator primario. Portanto, podem e vão haver
trechos do codigo desnecessarios e mal otimizados.
- A diretiva BEGIN não pode ser uma LABEL (e.g: BEGIN: MOD_B). Ela SEMPRE será interpretada como DIRETIVA, portanto deverá ter esse formato: MOD_B: BEGIN.
A escolha de programar dessa forma é que, do meu ponto de vista, caso o MOD_B seja usado em outro módulo (PUBLIC MOD_B), ele é uma LABEL. Portanto, utilizar a declaração
BEGIN: MOD_B faz com que MOD_B não seja uma LABEL, levando a montagem incorreta do código (veja os arquivos _codigo5.asm e _codigo6.asm como exemplos).
- Nao é permitido operação de aritimetica (soma de ponteiro) quebrado por linha, ex: Y\n + 2 ou Y +\n2
- Unica operacao de arimetica de ponteiros permitida é a soma e.g: Y+2
- Nao é permitido comentarios entre operacoes, labels, etc. A partir do momento que um comentario é identificado, aquela parte do codigo é
desconsiderada.
- Por em quanto nao é possivel rodar o programa no WINDOWS devida a utilizacao de verificacao de arquivos/diretorios ./asm, ./pre e ./obj
- O arquivo .asm/.pre precisam ter obrigatoriamente a SECTION TEXT e SECTION DATA
- Como não foi solicitado na especificação, o programa não verifica se declarações de LABELS consideradas VARIÁVEIS (e.g: X: SPACE) são feitas na SECTION DATA e que o uso de instrucoes
são feitas exclusivamente na SECTION TEXT. Isso é assumido pelo programa que irá acontecer.
- Caso a entrada seja um arquivo módulo (diretivas BEGIN/END), obrigatoriamente precisa-se ter as duas diretivas BEGIN/END
- Caso e entrada seja um arquivo módulo e nao possua BEGIN/END o programa ira considerar como sendo um arquivo comum e ira gerar a saida correspondente
- A saida do programa para arquivos .asm, sempre sera um arquivo .pre com todos os caracteres convertidos para UPPERCASE,
inclusive numeros hexadecimais e.g 0xA vira 0XA. Com relacao a numeeros hexadecimais, nao ha disntincao entre 0xA e 0XA durante o processamento do arquivo.
- Por falta de informações sobre hexadecimais na especificação, o programa interpreta todo hexdecimal como sendo de 16bits em complemento de 2. O seu valor será
convertido para inteiro durante a fase de montagem (mais especificamente durante a segunda passagem).
- O programa nao verifica Out-of-Bounds/Segmentation Fault para quando se realiza soma de ponteiros (diretiva SPACE). e.g: VAL: SPACE 3, VAL + 3 resultaria em
transposicao de memoria, ou seja, memory boundry foi ultrapassada. O programa nao ira detectar esse tipo de falha.










